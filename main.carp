(Debug.sanitize-addresses)

(Project.config "title" "DependencyDay")
(Project.config "output-directory" "./out")

(load "SDL.carp")
(load "SDL_image.carp")
(load "Geometry.carp")
(load "Pattern.carp")
(load "Filepath.carp")
(load "Smoke.carp")
(load "Explosion.carp")

(use Array)
(use SDL)
(use Filepath)

(def screen-width 1024)
(def screen-height 768)

(def team-alien 0)
(def team-human 1)

(def shot-count 500)
(def input-dir 0.0f)

(deftype Art
    [corvette (Ptr SDL_Texture)
     slime (Ptr (SDL_Texture))
     shot (Ptr (SDL_Texture))
     smoke (Ptr SDL_Texture)
     explosion (Ptr SDL_Texture)
     earth (Ptr (SDL_Texture))
     mothership (Ptr (SDL_Texture))])

(def art (Art.init NULL NULL NULL NULL NULL NULL NULL))

(deftype Obj
    [pos Vec2
     radius Float
     dir Float
     speed Float
     sprite (Fn [&Art] (Ref (Ptr SDL_Texture)))
     team Int
     alive Bool])

(defn alive? [obj]
  @(Obj.alive obj))

(defmodule Obj
  (defn draw [rend o]
    (let [get-sprite-fn @(Obj.sprite o)
          img @(get-sprite-fn &art)
          pos (Obj.pos o)
          dims (SDL.dimensions img)
          w @(SDL_Rect.w &dims)
          h @(SDL_Rect.h &dims)]
      (when (alive? o)
        (SDL.render-copy-ex rend
                            img
                            (address dims)
                            (address (SDL.rect (- (Float.to-int @(Vec2.x pos)) (/ w 2))
                                               (- (Float.to-int @(Vec2.y pos)) (/ h 2))
                                               w
                                               h))
                            (- 360.0 (Geometry.radians-to-degree (Double.from-float @(Obj.dir o))))
                            (address (SDL.point (/ w 2) (/ h 2)))
                            SDL.flip-none))))
  (defn tick [o]
    (let [pos @(Obj.pos &o)
          dir @(Obj.dir &o)
          speed @(Obj.speed &o)
          new-pos (Vec2.add &pos &(Vec2.init (* speed (Float.cos dir)) (* speed (* -1.0f (Float.sin dir)))))]
      (Obj.set-pos o new-pos))))

(deftype Shot
    [obj-index Int
     alive Bool])

(deftype GameState
    [objs (Array Obj)
     shots (Array Shot)])

(defn-do draw [app rend state]
  (bg rend &(rgb 30 40 50))
  (render-clear rend)
  (draw-texture rend @(Art.earth &art) &(point (- screen-width 256) 0))
  (draw-texture rend @(Art.mothership &art) &(point 0 0))
  (let [smoke-img @(Art.smoke &art)]
    (foreach [s &smokes] (Smoke.draw rend s smoke-img)))
  (foreach [o (GameState.objs state)] (Obj.draw rend o))
  (let [explosion-img @(Art.explosion &art)]
    (foreach [e &explosions] (Explosion.draw rend e explosion-img))))

(defn index-of-dead-shot [shots]
  (let-do [found -1]
    (for [i 0 (count shots)]
      (when (not @(Shot.alive (nth shots i)))
        (do (set! found i)
            (break))))
    found))

(defn log [msg]
  (println* (get-ticks) ": " msg))

(defn shoot [state pos dir team]
  (let [shots (GameState.shots state)
        found (index-of-dead-shot shots)]
    (if (= -1 found)
      (log "Can't shoot, no dead shot found to recycle.")
      (let-do [shot (nth shots found)
               objs (GameState.objs state)
               obj (nth objs @(Shot.obj-index shot))]
        (Shot.set-alive! shot true)
        (Obj.set-alive! obj true)
        (Obj.set-pos! obj pos)
        (Obj.set-dir! obj dir)
        (Obj.set-speed! obj 5.0f)
        (Obj.set-team! obj team)))))

(defn ai [state obj]
  (when (and (alive? obj) (= 0 (Int.random-between 0 100)))
    (shoot state @(Obj.pos obj) @(Obj.dir obj) @(Obj.team obj))))

(defn pos-outside? [pos]
  (let [x @(Vec2.x pos)
        y @(Vec2.y pos)
        margin 0.0f]
    (or* (< x margin)
         (< y margin)
         (< (- (Float.from-int screen-width) margin) x)
         (< (- (Float.from-int screen-height) margin) y))))

(defn hit? [a b]
  (let [r (+ @(Obj.radius a) @(Obj.radius b))]
    (Vec2.within-distance? (Obj.pos a) (Obj.pos b) r)))

(defn-do kill! [ship]
  (Obj.set-alive! ship false)
  (Obj.set-speed! ship 0.0f))

(defn tick-all-objs [objs]
  (endo-map Obj.tick objs))

(defn-do tick [state]
  (foreach [s &smokes] (Smoke.tick! s))
  (let [explosion-img @(Art.explosion &art)]
    (foreach [e &explosions] (Explosion.tick! e explosion-img)))
  (foreach [o (GameState.objs &state)]
           (do
             ;; (when (= 0 (Int.random-between 0 10))
             ;;   (reuse-smoke @(Obj.pos o)))
             ;; (let [dir @(Obj.dir o)]
             ;;   (Obj.set-dir! o (+ dir (* 0.025f (Float.sin (* 0.005f (Float.from-int (SDL.get-ticks))))))))
             (ai &state o)
             ))
  (let [player (nth (GameState.objs &state) shot-count)
        new-dir (+ @(Obj.dir player) input-dir)]
    (Obj.set-dir! player new-dir))
  (foreach [shot (GameState.shots &state)]
           (let-do [objs (GameState.objs &state)
                    shot-obj (nth objs @(Shot.obj-index shot))]
             (when (pos-outside? (Obj.pos shot-obj))
               (Shot.set-alive! shot false))
             (for [i shot-count (count objs)]
               (let [ship (nth objs i)]
                 (when (and* (hit? ship shot-obj)
                             (alive? shot-obj)
                             (alive? ship)
                             (/= (Obj.team ship) (Obj.team shot-obj)))
                   (do
                     (kill! ship)
                     (kill! shot-obj)
                     (Shot.set-alive! shot false)
                     (reuse-explosion (Obj.pos ship))))))))
  (GameState.update-objs state tick-all-objs))

(defn random-ship [side]
  (let [is-alien (= side team-alien)
        low (if is-alien 0 (- screen-width 300))
        high (if is-alien 300 screen-width)
        dir-low (if is-alien (* pi -0.25f) (* pi 0.75f))
        dir-high (if is-alien (* pi 0.25f) (* pi 1.25f))
        sprite (if is-alien Art.slime Art.corvette)]
    (Obj.init (Vec2.init (Float.from-int (random-between low high))
                         (random-between 0.0f (Float.from-int screen-height)))
              10.0f ;; radius
              (random-between dir-low dir-high)
              (random-between 1.0f 2.0f) ;; speed
              sprite
              side
              true)))

(defn random-alien [] (random-ship team-alien))
(defn random-human [] (random-ship team-human))

(defn dead-shot-obj []
  (Obj.init (Vec2.init 0.0f -100.0f) 10.0f 0.0f 0.0f Art.shot -1 false))

(defn dead-shot [i]
  (Shot.init @i false))

;; (sig make-state (Fn [] (Array Obj)))
(defn make-state []
  (GameState.init
   (concat &[(repeat shot-count dead-shot-obj) (repeat 10 random-alien) (repeat 10 random-human)])
   (copy-map dead-shot &(range 0 (dec shot-count) 1))))

(defn load-img [rend img-dir name]
  (IMG.load-texture rend (cstr &(str* img-dir name))))

(defn-do load-assets [rend img-dir]
  (set! art (Art.init (load-img rend img-dir "Corvette.png")
                      (load-img rend img-dir "Slime.png")
                      (load-img rend img-dir "Shot.png")
                      (load-img rend img-dir "Smoke.png")
                      (load-img rend img-dir "Explosion.png")
                      (load-img rend img-dir "Earth.png")
                      (load-img rend img-dir "Mothership.png"))))

(defn event-handler [app]
  (foreach [event &(SDL.Event.all)]
           (case (SDL.Event.type event)
             SDL.Event.quit (SDLApp.stop app)
             SDL.Event.key-down (let [key (SDL.Event.keycode event)]
                                  (case key
                                    SDL.Keycode.escape (SDLApp.stop app)
                                    SDL.Keycode.left (set! input-dir 0.05f)
                                    SDL.Keycode.right (set! input-dir -0.05f)
                                    ()))
             SDL.Event.key-up (set! input-dir 0.0f)
             ())))

(defn main []
  (let-do [app (SDLApp.create "Dependency Day" screen-width screen-height)
           state (make-state)
           rend @(SDLApp.renderer &app)
           img-dir (str* &(dir-from-path (System.get-arg 0)) "/img/")]
    (Debug.log-memory-balance! true)
    (load-assets rend &img-dir)
    (SDL.set-render-draw-blend-mode rend SDL.blend-mode-blend)
    (SDLApp.run-with-callbacks &app event-handler tick draw state)))
