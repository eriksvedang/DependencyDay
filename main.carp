(Debug.sanitize-addresses)

(Project.config "title" "DependencyDay")
(Project.config "output-directory" "./out")

(load "SDL.carp")
(load "SDL_image.carp")
(load "Geometry.carp")
(load "Pattern.carp")

(use Array)
(use SDL)

(def screen-width 1024)
(def screen-height 768)

(def team-alien 0)
(def team-human 1)

(deftype Art
    [corvette (Ptr SDL_Texture)
     slime (Ptr (SDL_Texture))
     smoke (Ptr SDL_Texture)
     earth (Ptr (SDL_Texture))
     mothership (Ptr (SDL_Texture))])

(def art (Art.init NULL NULL NULL NULL NULL))

(deftype Vec2
  [x Float
   y Float])

(defmodule Vec2
  (defn add [a b]
    (Vec2.init (+ @(Vec2.x a) @(Vec2.x b))
               (+ @(Vec2.y a) @(Vec2.y b)))))

(deftype Obj
    [pos Vec2
     radius Float
     dir Float
     sprite (Fn [&Art] (Ref (Ptr SDL_Texture)))])

(defmodule Obj
  (defn draw [rend o]
    (let [get-sprite-fn @(Obj.sprite o)
          img @(get-sprite-fn &art)
          pos (Obj.pos o)
          dims (SDL.dimensions img)
          w @(SDL_Rect.w &dims)
          h @(SDL_Rect.h &dims)]
      (SDL.render-copy-ex rend
                          img
                          (address dims)
                          (address (SDL.rect (- (Float.to-int @(Vec2.x pos)) (/ w 2))
                                             (- (Float.to-int @(Vec2.y pos)) (/ h 2))
                                             w
                                             h))
                          (- 360.0 (Geometry.radians-to-degree (Double.from-float @(Obj.dir o))))
                          (address (SDL.point (/ w 2) (/ h 2)))
                          SDL.flip-none)))
  (defn tick [o]
    (let [pos @(Obj.pos &o)
          dir @(Obj.dir &o)
          new-pos (Vec2.add &pos &(Vec2.init (Float.cos dir) (* -1.0f (Float.sin dir))))]
      (Obj.set-pos o new-pos))))

(deftype Smoke
    [pos Vec2
     age Float]) ; this is the age left, should start at 1.0f

(defmodule Smoke
  (defn draw [rend s]
    (let-do [pos (Smoke.pos s)
             img @(Art.smoke &art)
             dims (SDL.dimensions img)
             sub (Float.to-int (* 32.0f (- 1.0f @(Smoke.age s))))
             w (- @(SDL_Rect.w &dims) sub)
             h (- @(SDL_Rect.h &dims) sub)]
      (when (pos? w)
        (SDL.render-copy-ex rend
                            img
                            (address dims)
                            (address (SDL.rect (- (Float.to-int @(Vec2.x pos)) (/ w 2))
                                               (- (Float.to-int @(Vec2.y pos)) (/ h 2))
                                               w
                                               h))
                            0.0
                            (address (SDL.point (/ w 2) (/ h 2)))
                            SDL.flip-none))
      ))
  (defn tick! [s]
    (let [a @(Smoke.age s)]
      (Smoke.set-age! s (- a 0.01666f)))))

(def smokes (replicate 100 &(Smoke.init (Vec2.init 0.0f 0.0f) 1.0f)))

(defn-do reuse-smoke [pos]
  (foreach [s &smokes]
           (when (<= @(Smoke.age s) 0.0f)
             (do (Smoke.set-age! s 1.0f)
                 (Smoke.set-pos! s @&pos)
                 (break))))
  (let [s (nth &smokes (random-between 0 (count &smokes)))]
    (do (Smoke.set-age! s 1.0f)
        (Smoke.set-pos! s pos))))

(defn-do draw [app rend state]
  (bg rend &(rgb 30 40 50))
  (render-clear rend)
  (draw-texture rend @(Art.earth &art) &(point (- screen-width 256) 0))
  (draw-texture rend @(Art.mothership &art) &(point 0 0))
  (foreach [s &smokes] (Smoke.draw rend s))
  (foreach [o state] (Obj.draw rend o)))

(defn-do tick [state]
  (foreach [s &smokes] (Smoke.tick! s))
  (foreach [o &state] (when (= 0 (Int.random-between 0 10))
                        (reuse-smoke @(Obj.pos o))))
  (endo-map Obj.tick state))

(defn random-ship [side]
  (let [is-alien (= side team-alien)
        low (if is-alien 0 (- screen-width 300))
        high (if is-alien 300 screen-width)
        dir-low (if is-alien (* pi -0.25f) (* pi 0.75f))
        dir-high (if is-alien (* pi 0.25f) (* pi 1.25f))
        sprite (if is-alien Art.slime Art.corvette)]
    (Obj.init (Vec2.init (Float.from-int (random-between low high))
                         (random-between 0.0f (Float.from-int screen-height)))
              10.0f ;; radius
              (random-between dir-low dir-high)
              sprite)))

(defn random-alien [] (random-ship team-alien))
(defn random-human [] (random-ship team-human))

;; (sig make-state (Fn [] (Array Obj)))
(defn make-state []
  ;;[(Obj.init (Vec2.init 0.0f 0.0f) 10.0f (* pi 1.75f))]
  (concat &[(repeat 20 random-alien) (repeat 20 random-human)])
  )

(defn load-img [rend img-dir name]
  (IMG.load-texture rend (cstr &(str* img-dir name))))

(defn-do load-assets [rend img-dir]
  (set! art (Art.init (load-img rend img-dir "Corvette.png")
                      (load-img rend img-dir "Slime.png")
                      (load-img rend img-dir "Smoke.png")
                      (load-img rend img-dir "Earth.png")
                      (load-img rend img-dir "Mothership.png"))))

(defn append-slash [s]
  (str* s "/"))

(doc dir-from-path "Removes the file-name part of a path to a file.")
(defn dir-from-path [path]
  (let [segments (split-by path &[\/])
        n (dec (count &segments))
        without-last (prefix-array &segments n)]
    (join &(copy-map append-slash &without-last))))

(defn main []
  (let-do [app (SDLApp.create "Dependency Day" screen-width screen-height)
           state (make-state)
           rend @(SDLApp.renderer &app)
           img-dir (str* &(dir-from-path (System.get-arg 0)) "/img/")]
    (load-assets rend &img-dir)
    (SDL.set-render-draw-blend-mode rend SDL.blend-mode-blend)
    (SDLApp.run-with-callbacks &app SDLApp.quit-on-esc tick draw state)))
