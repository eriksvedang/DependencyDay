(Debug.sanitize-addresses)

(Project.config "title" "DependencyDay")
(Project.config "output-directory" "./out")

(load "Random.carp")
(load "SDL.carp")
(load "SDL_image.carp")
(load "SDL_ttf.carp")
(load "Geometry.carp")
(load "Pattern.carp")
(load "Filepath.carp")
(load "Smoke.carp")
(load "Explosion.carp")
(load "Toolkit.carp")

(use Array)
(use SDL)
(use Filepath)

(def reset false)
(def playing false)

(def screen-width 1400)
(def screen-height 800)

(def font (the (Ptr TTF_Font) NULL))
(def title-texture (the (Ptr SDL_Texture) NULL))

(def small-font (the (Ptr TTF_Font) NULL))
(def player-numbers (the (Array (Ptr SDL_Texture)) []))

(def team-alien 0)
(def team-human 1)

(def shot-count 500)
(def ships-per-team 7)
(def ship-count (* ships-per-team 2))
(def ships-with-ai [2 3 4 5 6
                    (+ ships-per-team 2)
                    (+ ships-per-team 3)
                    (+ ships-per-team 4)
                    (+ ships-per-team 5)
                    (+ ships-per-team 6)])

(deftype Input
    [left Bool
     right Bool
     shoot Bool
     obj-index Int
     ship-index Int
     name String])

(defn make-input [index name]
  (Input.init false false false index index @name))

(def player-inputs [(make-input 0 "P1") (make-input 1 "P2")
                    (make-input (+ ships-per-team 0) "P3") (make-input (+ ships-per-team 1) "P4")])

(deftype Art
    [corvette (Ptr SDL_Texture)
     slime (Ptr (SDL_Texture))
     shot (Ptr (SDL_Texture))
     slime-shot (Ptr (SDL_Texture))
     smoke (Ptr SDL_Texture)
     explosion (Ptr SDL_Texture)
     earth (Ptr (SDL_Texture))
     mothership (Ptr (SDL_Texture))])

(def art (Art.init NULL NULL NULL NULL NULL NULL NULL NULL))

(deftype Obj
    [pos Vec2
     radius Float
     dir Float
     speed Float
     sprite (Fn [&Art] (Ref (Ptr SDL_Texture)))
     team Int
     alive Bool])

(defn alive? [obj]
  @(Obj.alive obj))

(defmodule Obj
  (defn draw [rend o]
    (let [get-sprite-fn @(Obj.sprite o)
          img @(get-sprite-fn &art)
          pos (Obj.pos o)
          dims (SDL.dimensions img)
          w @(SDL_Rect.w &dims)
          h @(SDL_Rect.h &dims)]
      (when (alive? o)
        (SDL.render-copy-ex rend
                            img
                            (address dims)
                            (address (SDL.rect (- (Float.to-int @(Vec2.x pos)) (/ w 2))
                                               (- (Float.to-int @(Vec2.y pos)) (/ h 2))
                                               w
                                               h))
                            (- 360.0 (Geometry.radians-to-degree (Double.from-float @(Obj.dir o))))
                            (address (SDL.point (/ w 2) (/ h 2)))
                            SDL.flip-none))))
  (defn tick [o]
    (let [pos @(Obj.pos &o)
          dir @(Obj.dir &o)
          speed @(Obj.speed &o)
          new-pos (Vec2.add &pos &(Vec2.init (* speed (Float.cos dir)) (* speed (* -1.0f (Float.sin dir)))))]
      (Obj.set-pos o new-pos))))

(deftype Shot
    [obj-index Int
     age Int
     alive Bool])

(deftype Ship
    [obj-index Int
     reload Int])

(deftype Ai
    [obj-index Int
     ship-index Int])

(deftype GameState
    [objs (Array Obj)
     shots (Array Shot)
     ships (Array Ship)
     ais (Array Ai)])

(defn-do draw [app rend state]
  (bg rend &(rgb 30 40 (+ 50 (int-sin (get-ticks) 1000 10))))
  (render-clear rend)
  (draw-texture rend @(Art.earth &art) &(point (- screen-width 256) 0))
  (draw-texture rend @(Art.mothership &art) &(point 0 0))
  (let [smoke-img @(Art.smoke &art)]
    (foreach [s &smokes] (Smoke.draw rend s smoke-img)))
  (foreach [o (GameState.objs state)] (Obj.draw rend o))
  (let [explosion-img @(Art.explosion &art)]
    (foreach [e &explosions] (Explosion.draw rend e explosion-img)))
  (when playing
    (for [i 0 (length &player-inputs)]
      (let [tex @(nth &player-numbers i)
            input (nth &player-inputs i)
            obj-index @(Input.obj-index input)
            player-obj (nth (GameState.objs state) obj-index)
            pos (Obj.pos player-obj)
            x (Float.to-int @(Vec2.x pos))
            y (Float.to-int @(Vec2.y pos))]
        (when (alive? player-obj)
          (draw-texture-centered rend tex &(point x (+ y 32)))))))
  (when (not playing)
    (draw-texture-centered rend title-texture &(point (/ screen-width 2) (/ screen-height 2)))))

(defn index-of-dead-shot [shots]
  (let-do [found -1]
    (for [i 0 (length shots)]
      (when (not @(Shot.alive (nth shots i)))
        (do (set! found i)
            (break))))
    found))

(defn shoot [state pos dir team ship]
  (let [shots (GameState.shots state)
        found (index-of-dead-shot shots)]
    (if (= -1 found)
      (log "Can't shoot, no dead shot found to recycle.")
      (let-do [shot (nth shots found)
               objs (GameState.objs state)
               obj (nth objs @(Shot.obj-index shot))]
        (Ship.set-reload! ship 120)
        (Shot.set-age! shot 0)
        (Shot.set-alive! shot true)
        (Obj.set-alive! obj true)
        (Obj.set-pos! obj pos)
        (Obj.set-dir! obj dir)
        (Obj.set-sprite! obj (if (= team team-human) Art.shot Art.slime-shot))
        (Obj.set-speed! obj 5.0f)
        (Obj.set-team! obj team)))))

(defn pos-outside? [pos]
  (let [x @(Vec2.x pos)
        y @(Vec2.y pos)
        margin 0.0f]
    (or* (< x margin)
         (< y margin)
         (< (- (Float.from-int screen-width) margin) x)
         (< (- (Float.from-int screen-height) margin) y))))

(defn hit? [a b]
  (let [r (+ @(Obj.radius a) @(Obj.radius b))]
    (Vec2.within-distance? (Obj.pos a) (Obj.pos b) r)))

(defn-do kill! [obj]
  (Obj.set-alive! obj false)
  (Obj.set-speed! obj 0.0f))

(defn tick-all-objs [objs]
  (endo-map Obj.tick objs))

(defn tick-shots [state]
  (foreach [shot (GameState.shots state)]
           (let-do [objs (GameState.objs state)
                    shot-obj (nth objs @(Shot.obj-index shot))]
             (Shot.set-age! shot (inc @(Shot.age shot)))
             (when (or (pos-outside? (Obj.pos shot-obj))
                       (< 200 @(Shot.age shot)))
               (Shot.set-alive! shot false))
             (for [i 0 ship-count]
               (let [ship (nth objs i)]
                 (when (and* (hit? ship shot-obj)
                             (alive? shot-obj)
                             (alive? ship)
                             (/= (Obj.team ship) (Obj.team shot-obj)))
                   (do
                     (kill! ship)
                     (kill! shot-obj)
                     (Shot.set-alive! shot false)
                     (reuse-explosion (Obj.pos ship)))))))))

(defn tick-ships [state]
  (foreach [ship (GameState.ships state)]
           (let-do [objs (GameState.objs state)
                    ship-obj (nth objs @(Ship.obj-index ship))
                    reload-counter @(Ship.reload ship)
                    speed @(Obj.speed ship-obj)]
             (when (and (alive? ship-obj)
                        (= 0 (Int.random-between 0 10)))
               (reuse-smoke (Obj.pos ship-obj)))
             (when (< speed 3.0f)
               (Obj.set-speed! ship-obj (+ speed 0.01f)))
             (when (pos? reload-counter)
               (Ship.set-reload! ship (dec reload-counter))))))

(defn tick-players [state]
  (for [player-index 0 (length &player-inputs)]
    (let [input (nth &player-inputs player-index)
          input-dir (cond @(Input.left input) 0.05f
                          @(Input.right input) -0.05f
                          0.0f)
          obj-index @(Input.obj-index input)
          player (nth (GameState.objs state) obj-index)
          new-dir (+ @(Obj.dir player) input-dir)]
      (do
        (Obj.set-dir! player new-dir)
        (let [ship (nth (GameState.ships state) @(Input.ship-index input))]
          (when (and @(Input.shoot input) (not (pos? @(Ship.reload ship))))
            (shoot state @(Obj.pos player) @(Obj.dir player) @(Obj.team player) ship)))))))

(defn tick-ais [state]
  (foreach [ai (GameState.ais state)]
           (let [obj (nth (GameState.objs state) @(Ai.obj-index ai))
                    ship (nth (GameState.ships state) @(Ai.ship-index ai))]
             (when (alive? obj)
               (do
                 ;;(println* "Ticking AI for " obj)
                 (when (< (=> obj Obj.pos Vec2.x) &100.0f) (Obj.set-dir! obj 0.0f))
                 (when (< (=> obj Obj.pos Vec2.y) &100.0f) (Obj.set-dir! obj (* 1.5f Float.pi)))
                 (when (< &(- (Float.from-int screen-width) 100.0f) (=> obj Obj.pos Vec2.x)) (Obj.set-dir! obj Float.pi))
                 (when (< &(- (Float.from-int screen-height) 100.0f) (=> obj Obj.pos Vec2.y)) (Obj.set-dir! obj (* 0.5f Float.pi)))
                 (when (and* (alive? obj) (zero? @(Ship.reload ship)))
                   (shoot state @(Obj.pos obj) @(Obj.dir obj) @(Obj.team obj) ship)))))))

(defn make-ship-obj [side y]
  (let [is-alien (= side team-alien)
        low (if is-alien 100 (- screen-width 200))
        high (if is-alien 200 (- screen-width 100))
        dir-low (if is-alien (* pi -0.05f) (* pi 0.95f))
        dir-high (if is-alien (* pi 0.05f) (* pi 1.05f))
        sprite (if is-alien Art.slime Art.corvette)
        spacing (/ screen-height (inc ships-per-team))]
    (Obj.init (Vec2.init (Float.from-int (random-between low high))
                         (Float.from-int (* spacing @y))) ;;(random-between 100.0f (Float.from-int (- screen-height 100))))
              10.0f ;; radius
              (random-between dir-low dir-high)
              0.1f ;; speed
              sprite
              side
              true)))

(defn random-alien [y] (make-ship-obj team-alien y))
(defn random-human [y] (make-ship-obj team-human y))

(defn dead-shot-obj []
  (Obj.init (Vec2.init 0.0f -100.0f) 10.0f 0.0f 0.0f Art.shot -1 false))

(defn dead-shot [i]
  (Shot.init @i 0 false))

(defn make-ship [i]
  (Ship.init @i (random-between 0 120)))

(defn make-ai [obj-index ship-index]
  (Ai.init obj-index ship-index))

(defn make-ai-helper [i]
  (make-ai @i @i))

;; (sig make-state (Fn [] (Array Obj)))
(defn make-state []
  (GameState.init
   (concat &[(copy-map random-alien &(endo-map id (range 1 7 1)))
             (copy-map random-human &(endo-map id (range 1 7 1)))
             (repeat shot-count dead-shot-obj)])
   (copy-map dead-shot &(range ship-count (dec (+ ship-count shot-count)) 1))
   (copy-map make-ship &(range 0 (dec ship-count) 1))
   (copy-map make-ai-helper &ships-with-ai)))

(defn make-empty-state []
  (GameState.init [] [] [] []))

(defn-do tick [state]
  (when playing
    (do
      (foreach [s &smokes] (Smoke.tick! s))
      (foreach [e &explosions] (Explosion.tick! e @(Art.explosion &art)))
      (tick-ais &state)
      (tick-ships &state)
      (tick-players &state)
      (tick-shots &state)))
  (if reset
    (do (set! reset false)
        (set! playing true)
        (make-state))
    (GameState.update-objs state tick-all-objs)))

(defn load-img [rend img-dir name]
  (IMG.load-texture rend (cstr &(str* img-dir name))))

(defn create-player-number-texture [rend input]
  (TTF.render-text-to-texture rend small-font (Input.name input) (SDL.rgb 255 255 255)))

(defn-do load-assets [rend img-dir]
  (set! art (Art.init (load-img rend img-dir "Corvette.png")
                      (load-img rend img-dir "Slime.png")
                      (load-img rend img-dir "Shot.png")
                      (load-img rend img-dir "SlimeShot.png")
                      (load-img rend img-dir "Smoke.png")
                      (load-img rend img-dir "Explosion.png")
                      (load-img rend img-dir "Earth.png")
                      (load-img rend img-dir "Mothership.png")))
  (if (TTF.ok? (TTF.init))
    (do (set! font (TTF.open-font (cstr &(str* img-dir "Hasklig.otf")) 80))
        (set! small-font (TTF.open-font (cstr &(str* img-dir "Hasklig.otf")) 16))
        (set! title-texture (TTF.render-text-to-texture rend font "DEPENDENCY DAY" (SDL.rgb 255 255 255)))
        (foreach [input &player-inputs]
                 ;; TODO: make sure this is memory safe
                 (set! player-numbers (push-back @&player-numbers (create-player-number-texture rend input)))))
    (println* "Failed to initialize SDL_ttf: " &(str (TTF.get-error)))))

(defn input-left! [player on]
  (Input.set-left! (nth &player-inputs player) on))

(defn input-right! [player on]
  (Input.set-right! (nth &player-inputs player) on))

(defn input-shoot! [player on]
  (Input.set-shoot! (nth &player-inputs player) on))

(defn event-handler [app]
  (foreach [event &(SDL.Event.all)]
           (case (SDL.Event.type event)
             SDL.Event.quit (SDLApp.stop app)

             SDL.Event.key-down (let [key (SDL.Event.keycode event)]
                                  (case key
                                    SDL.Keycode.escape (SDLApp.stop app)
                                    SDL.Keycode.return (set! reset true)

                                    SDL.Keycode.q (input-left! 0 true)
                                    SDL.Keycode.w (input-shoot! 0 true)
                                    SDL.Keycode.e (input-right! 0 true)

                                    SDL.Keycode.z (input-left! 1 true)
                                    SDL.Keycode.x (input-shoot! 1 true)
                                    SDL.Keycode.c (input-right! 1 true)

                                    SDL.Keycode.i (input-left! 2 true)
                                    SDL.Keycode.o (input-shoot! 2 true)
                                    SDL.Keycode.p (input-right! 2 true)

                                    SDL.Keycode.b (input-left! 3 true)
                                    SDL.Keycode.n (input-shoot! 3 true)
                                    SDL.Keycode.m (input-right! 3 true)
                                    ()))

             SDL.Event.key-up (let [key (SDL.Event.keycode event)]
                                (case key
                                  SDL.Keycode.q (input-left! 0 false)
                                  SDL.Keycode.w (input-shoot! 0 false)
                                  SDL.Keycode.e (input-right! 0 false)

                                  SDL.Keycode.z (input-left! 1 false)
                                  SDL.Keycode.x (input-shoot! 1 false)
                                  SDL.Keycode.c (input-right! 1 false)

                                  SDL.Keycode.i (input-left! 2 false)
                                  SDL.Keycode.o (input-shoot! 2 false)
                                  SDL.Keycode.p (input-right! 2 false)

                                  SDL.Keycode.b (input-left! 3 false)
                                  SDL.Keycode.n (input-shoot! 3 false)
                                  SDL.Keycode.m (input-right! 3 false)
                                  ()))
             ())))

(defn-do main []
  (Random.seed (Double.from-int (System.time)))
  (let-do [app (SDLApp.create "Dependency Day" screen-width screen-height)
           state (make-empty-state)
           rend @(SDLApp.renderer &app)
           img-dir (str* &(dir-from-path (System.get-arg 0)) "/img/")]
    ;;(Debug.log-memory-balance! true)
    (load-assets rend &img-dir)
    (SDL.set-render-draw-blend-mode rend SDL.blend-mode-blend)
    (SDLApp.run-with-callbacks &app event-handler tick draw state))
  0)
